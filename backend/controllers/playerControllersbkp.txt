const axios = require('axios');
const Player = require('../models/Player');

module.exports = {
  async store(req, res) {
    const { uplay_name, name, email } = req.body;

    playerInfo = await axios.get(
      `https://r6tab.com/api/search.php?platform=uplay&search=${uplay_name}`
    );

    const playersArray = playerInfo.data.results;

    const { p_id } = playersArray.filter(item => item.p_name == uplay_name)[0];

    const player = await Player.create({
      p_id: p_id,
      uplay_name: uplay_name,
      name: name,
      email: email
    });

    return res.json(player);
  },
  async index(req, res) {
    const { uplay_name } = req.query;

    const player = await Player.find();

    console.log('test');
    console.log(player);

    if (!player) {
      return res.json({ message: 'Player not found.' });
    }

    const { p_id } = player;

    playerStats = await axios.get(
      `https://r6tab.com/api/player.php?p_id=${p_id}`
    );

    const {
      NA_kills,
      NA_deaths,
      NA_wins,
      NA_losses,
      NA_abandons,
      NA_mmr,
      NA_maxmmr,
      NA_maxrank,
      NA_champ,
      NA_mmrchange,
      SA_kills,
      SA_deaths,
      SA_wins,
      SA_losses,
      SA_abandons,
      SA_mmr,
      SA_maxmmr,
      SA_maxrank,
      SA_champ,
      SA_mmrchange
    } = playerStats.data.ranked;

    const { p_currentmmr, p_currentrank, p_level } = playerStats.data;

    const kd_ratio = NA_kills / NA_deaths;
    const wl_ratio = NA_wins / NA_losses;

    return res.json({
      p_id: p_id,
      uplay_name: uplay_name,
      p_currentmmr: p_currentmmr,
      p_currentrank: p_currentrank,
      p_level: p_level,
      NA_kills: NA_kills,
      NA_deaths: NA_deaths,
      NA_wins: NA_wins,
      NA_losses: NA_losses,
      NA_abandons: NA_abandons,
      NA_mmr: NA_mmr,
      NA_maxmmr: NA_maxmmr,
      NA_maxrank: NA_maxrank,
      NA_champ: NA_champ,
      NA_mmrchange: NA_mmrchange,
      SA_kills: SA_kills,
      SA_deaths: SA_deaths,
      SA_wins: SA_wins,
      SA_losses: SA_losses,
      SA_abandons: SA_abandons,
      SA_mmr: SA_mmr,
      SA_maxmmr: SA_maxmmr,
      SA_maxrank: SA_maxrank,
      SA_champ: SA_champ,
      SA_mmrchange: SA_mmrchange
    });
  }
};
